{"version":3,"sources":["jarbler.js","difficultyConstants.js","functions.js","apiStuff.js","App.js","serviceWorker.js","index.js"],"names":["textToChars","text","split","map","c","charCodeAt","byteHex","n","Number","toString","substr","applySaltToChar","code","process","REACT_APP_JARBLE_CODE","reduce","a","b","module","exports","String","join","difficulties","widths","mineCounts","getNeighbors","x","y","includeDiag","arguments","length","undefined","filter","propagate","cell","board","acc","isMine","count","flagged","dunno","freshNeighbors","includes","emptyNeighbors","newAcc","push","flatten","concat","propagateMap","Object","objectSpread","defineProperty","makeBoard","diff","width","minesCount","Array","Math","pow","fill","mines","uniqMineLocations","arr","location","floor","random","boardFilledWithMines","_","i","splitEvery","row","clicked","get3BV","edges","marked","p","chunks","bits","score","state","threeBV","difficulty","clicks","time","losingCell","api","axios","create","baseURL","gameOverCall","id","get","colors","commas","s","replace","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playing","selectedDiff","gameOver","timer","flags","status","hint","touchTimer","skipContextMenu","music","startedAt","gameID","top50","scoreNeighbors","key","handleSelect","bind","assertThisInitialized","startGame","handleCellRightClick","updateCellState","handleCellClick","suspense","winnerWinnerChickenDinner","handlePointerDown","handlePointerUp","handlePointerLeave","toggleMusic","setTop50","unloadHandler","e","preventDefault","alert","window","addEventListener","clearInterval","removeEventListener","_this2","catch","data","rows","then","_ref","setState","target","value","cb","set","lensPath","_this3","props","skipStatus","console","log","maybeUpdateStatus","_this4","post","jarbler","endedAt","Date","registerScore","name","prompt","Promise","resolve","registerName","_this5","maybeResetHint","newBoard","_ref2","lastkey","_this6","minClicks","newGame","_ref3","setInterval","button","gaps","hintCell","_this7","pointerType","setTimeout","_this8","player","pause","currentTime","play","_this9","react_default","createElement","className","onChange","d","onClick","style","float","padStart","color","fontWeight","disabled","onMouseUp","onMouseDown","onContextMenu","onTouchStart","onTouchEnd","onTouchMove","isLosingCell","getOverlay","loop","ref","src","href","textAlign","fontFamily","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.507adfd8.chunk.js","sourcesContent":["const textToChars = text => text.split('').map(c => c.charCodeAt(0))\nconst byteHex = n => (\"0\" + Number(n).toString(16)).substr(-2)\nconst applySaltToChar = code =>\n  textToChars(process.env.REACT_APP_JARBLE_CODE)\n    .reduce((a,b) => a ^ b, code)\n\nmodule.exports = (text) => String(text).split('')\n  .map(textToChars)\n  .map(applySaltToChar)\n  .map(byteHex)\n  .join('')\n","export const difficulties = [\n  \"I'm too young to die\",\n  'Hey, not too rough',\n  'Hurt me plenty',\n  'Ultra-Violence',\n  'Nightmare!',\n];\nexport const widths = [10, 13, 15, 25, 35];\nexport const mineCounts = [10, 15, 30, 99, 300];\n","import {\n  reduce,\n  splitEvery,\n  flatten,\n} from 'ramda';\n\nimport {\n  widths,\n  mineCounts,\n} from './difficultyConstants';\n\n// takes in a cell and a board and returns all existing neighbors of that cell in that board\nexport const getNeighbors = (x, y, b, includeDiag = true) => [\n  b[y - 1] && includeDiag && b[y - 1][x - 1],\n  b[y] && b[y][x - 1],\n  b[y + 1] && includeDiag && b[y + 1][x - 1],\n  b[y - 1] && b[y - 1][x],\n  b[y + 1] && b[y + 1][x],\n  b[y - 1] && includeDiag && b[y - 1][x + 1],\n  b[y] && b[y][x + 1],\n  b[y + 1] && includeDiag && b[y + 1][x + 1],\n].filter(x => x);\n\n// takes a cell and a board and an optional accumulator (for recursion)\n// artificially clicks cell passed in, and if it is an empty cell, all of its neighbors\n// and propagates until there are no more empty cells in that chunk. returns a one dimensional array\n// of cells to be \"clicked\"\nexport const propagate = (cell, board, acc) => {\n  if (!cell.isMine && cell.count === 0 && !cell.flagged && !cell.dunno) {\n    const freshNeighbors = getNeighbors(cell.x, cell.y, board, true)\n      .filter(n => !acc || !acc[n.y] || !acc[n.y].includes(n.x))\n\n    const emptyNeighbors = freshNeighbors.filter(n => n.count === 0);\n\n    if (freshNeighbors.length === 0) return [];\n\n    const newAcc = freshNeighbors.reduce((a, c) => {\n      if (!a[c.y]) {\n        a[c.y] = [c.x];\n      } else {\n        a[c.y].push(c.x);\n      }\n      return a;\n    }, acc || []);\n\n    return flatten(freshNeighbors.concat(emptyNeighbors.map(n => propagate(n, board, newAcc))));\n  }\n  return [];\n};\n\n// takes the final one dimensional array returned from function above and turns it into a nice\n// two dimensional array for easy board updating later\nexport const propagateMap = reduce((a, c) => ({...a, [c.y]: { ...a[c.y], [c.x]: true }}), {});\n\n// makes a board based on difficulty\n// mine location and the counts of neighboring mines are set here and never changed\nexport const makeBoard = (diff) => {\n  const width = widths[diff];\n  const minesCount = mineCounts[diff];\n\n  const board = Array(width ** 2).fill({});\n\n  const uniqMineLocations = (count, arr = []) => {\n    if (count === 0) return arr;\n\n    const location = Math.floor(Math.random() * (width ** 2));\n\n    if (arr.includes(location)) return uniqMineLocations(count, arr);\n\n    return uniqMineLocations(count - 1, arr.concat([location]));\n  }\n\n  const mines = uniqMineLocations(minesCount);\n\n  const boardFilledWithMines = board.map((_, i) => ({ isMine: mines.includes(i) }));\n\n  const twoDBoard = splitEvery(width, boardFilledWithMines);\n\n  const boardWithCounts = twoDBoard.map((row, y, b) => row.map((cell, x) => {\n    const count = getNeighbors(x, y, b)\n      .filter(c => c.isMine).length;\n    return { ...cell, count, clicked: false, flagged: false, dunno: false, x, y }\n  }));\n\n\n  return boardWithCounts;\n}\n\n// gets the minimum amount of clicks needed to solve a given board\n// this is achieved by first looking only at cells with no neighboring mines\n// and artifically clicking them iteratively and incrementing a counter.\n// if a cell is included in a previous propagation the counter is not incremented.\n// then you simply count the remaining non mine cells and add the 2 numbers together\n\nexport const get3BV = (board) => {\n  const edges = flatten(board).filter(c => !c.isMine && !c.count).reduce((a, c) => {\n    if (a.board[c.y][c.x].marked) return a;\n    const p = propagateMap(propagate({ ...c, marked: true }, board));\n\n    const newBoard = a.board.map((row, y) => row.map((cell, x) => {\n      if (p && p[y] && p[y][x]) return { ...cell, marked: true };\n      return cell;\n    }));\n\n    return { board: newBoard , chunks: a.chunks + 1 };\n  }, { board, chunks: 0 })\n\n  const bits = flatten(edges.board).filter(c => c.count > 0 && !c.marked && !c.isMine).length;\n\n  return edges.chunks + bits;\n};\n\n// my scoring algorithm. to keep cheating to a minimum this version of the function is only used\n// to graphically display the score. if and when the user wins, the score is recalculated on the backend\n// with minimal information sent\n\nexport const score = state => Math.floor((\n  ((state.threeBV ** 3) * ((state.difficulty ** 3) + 1)) /\n  ((state.clicks * 3 || 1) * (state.time  * 2 || 1))\n) * (!state.losingCell.x ? 10000 : 0));\n","import axios from 'axios';\nimport jarbler from './jarbler';\n\nconst api = axios.create({\n  baseURL: `http://${\n    process.env.NODE_ENV === 'production'\n      ? 'cokebustapi.herokuapp.com'\n      : 'localhost:4000'\n  }/minesweeper`,\n});\n\nexport const getTop50 = () =>\n  api.get('top50')\n    .catch(() => ({\n      data: {\n        rows: []\n      },\n    }));\n\nexport const newGame = (startedAt, minClicks, difficulty) =>\n  api.post('newgame', { startedAt, minClicks, difficulty }).catch((e) => {\n    alert('something went wrong. your score wont be recorded but you can still play');\n    return { data: { id: null } };\n  });\n\nexport const sendClick = (id, startedAt, key) => {\n  if (!id) return Promise.resolve();\n  return api.post('recordclick', { id, startedAt, key: jarbler(key) });\n};\n\nexport const gameOverCall = id =>\n  api.get(`gameover/${id}`);\n\nexport const registerScore = (id, clicks, startedAt, board, difficulty, key) => {\n  if (!id) return;\n  return api.post('newscore', {\n    id,\n    clicks,\n    startedAt,\n    key: jarbler(key),\n    endedAt: new Date(),\n    board,\n    difficulty\n  });\n};\n\nexport const registerName = (id, name) => {\n  if (!id) return Promise.resolve({});\n  return api.post('registername', { id, name });\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  lensPath,\n  set,\n  flatten,\n} from 'ramda';\n\nimport {\n  difficulties,\n  mineCounts,\n} from './difficultyConstants';\nimport {\n  get3BV,\n  propagate,\n  propagateMap,\n  makeBoard,\n  score,\n} from './functions';\nimport {\n  getTop50,\n  gameOverCall,\n  newGame,\n  sendClick,\n  registerScore,\n  registerName,\n} from './apiStuff';\n\n\n\nconst getOverlay = (cell, gameOver, hintCell) => {\n  if (cell.clicked) {\n    if (cell.isMine) {\n      return '💥';\n    }\n    if (cell.count > 0) {\n      return cell.count;\n    }\n  } else if (cell.flagged) {\n    if (gameOver) {\n      return !cell.isMine ? '❌' : '✅';\n    }\n    return '🚩';\n  } else if (cell.dunno) {\n    return '❓';\n  }\n  if (!cell.clicked && hintCell && hintCell.x === cell.x && hintCell.y === cell.y) {\n    return '🈁';\n  }\n}\n\nconst colors = [\n  'like blue but with more dimensions',\n  'blue',\n  'green',\n  'red',\n  'purple',\n  'maroon',\n  'turquoise',\n  'black',\n  'darkgray',\n];\n\nconst commas = s => String(s).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n\nclass App extends Component {\n  constructor() {\n    super();\n    const board = makeBoard(0);\n    const threeBV = get3BV(board)\n    this.state = {\n      playing: false,\n      difficulty: 0,\n      selectedDiff: 0,\n      gameOver: true,\n      board,\n      threeBV,\n      losingCell: {},\n      timer: null,\n      time: 0,\n      clicks: 0,\n      flags: 0,\n      status: '🙂',\n      hint: null,\n      touchTimer: null,\n      skipContextMenu: false,\n      music: false,\n      startedAt: null,\n      gameID: null,\n      top50: [],\n      scoreNeighbors: [],\n      key: '',\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.handleCellRightClick = this.handleCellRightClick.bind(this);\n    this.updateCellState = this.updateCellState.bind(this);\n    this.handleCellClick = this.handleCellClick.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n    this.suspense = this.suspense.bind(this);\n    this.winnerWinnerChickenDinner = this.winnerWinnerChickenDinner.bind(this);\n    this.hint = this.hint.bind(this);\n    this.handlePointerDown = this.handlePointerDown.bind(this);\n    this.handlePointerUp = this.handlePointerUp.bind(this);\n    this.handlePointerLeave = this.handlePointerLeave.bind(this);\n    this.toggleMusic = this.toggleMusic.bind(this);\n    this.setTop50 = this.setTop50.bind(this);\n    this.unloadHandler = this.unloadHandler.bind(this);\n  }\n\n  unloadHandler(e) {\n    e.preventDefault();\n    alert('{AOL \"goodbye\" SOUND}');\n    if (this.state.gameID) {\n      gameOverCall(this.state.gameID)\n    }\n  }\n\n  componentDidMount() {\n    this.setTop50();\n    window.addEventListener(\"beforeunload\", this.unloadHandler);\n  }\n\n  componentWillUnmount() {\n    if (this.state.timer) {\n      clearInterval(this.state.timer);\n    }\n    window.removeEventListener(\"beforeunload\", this.unloadHandler);\n  }\n\n  setTop50(top50) {\n    getTop50()\n      .then(({ data }) => {\n        this.setState({ top50: data.rows });\n      });\n  }\n\n  handleSelect(e) {\n    this.setState({\n      selectedDiff: Number(e.target.value),\n    })\n  }\n\n  updateCellState(cell, cb = () => {}) {\n    this.setState({\n      board: set(lensPath([cell.y, cell.x]), cell, this.state.board),\n    }, cb);\n  }\n\n  handleCellRightClick(cell) {\n    let props = {};\n    if (!cell.clicked && !this.state.gameOver) {\n      if (!cell.flagged && !cell.dunno && this.state.flags > 0) {\n        props = { flagged: true };\n      } else if (cell.flagged && !cell.dunno) {\n        props = { flagged: false, dunno: true };\n      } else {\n        props = { flagged: false, dunno: false };\n      }\n      this.updateCellState({ ...cell, ...props }, () => {\n        this.setState({\n          flags: mineCounts[this.state.difficulty] - flatten(this.state.board)\n            .filter(c => c.flagged)\n            .length,\n        })\n      })\n    }\n  }\n\n  gameOver(losingCell, skipStatus = false) {\n    console.log('game over man, game over');\n    if (this.state.timer) clearInterval(this.state.timer);\n    gameOverCall(this.state.gameID).catch(console.log)\n    const maybeUpdateStatus = skipStatus ? { status: '🤮' } : {};\n    this.setState({\n      gameOver: true,\n      gameID: null,\n      losingCell,\n      ...maybeUpdateStatus,\n    });\n  }\n\n  winnerWinnerChickenDinner() {\n    console.log('winnerWinnerChickenDinner')\n    if (this.state.timer) clearInterval(this.state.timer);\n    const gameID = this.state.gameID;\n    registerScore(\n      this.state.gameID,\n      this.state.clicks,\n      this.state.startedAt,\n      this.state.board,\n      this.state.difficulty,\n      this.state.key,\n    );\n    this.setState({\n      status: '😎',\n      gameOver: true,\n      gameID: null,\n    }, () => {\n      let name = prompt(`\n        your score is ${score(this.state)}.\n        not great, not terrible. you definitely didnt apply yourself\n        Whats your name?\n      `);\n      if (!name) {\n        name = prompt(`\n          Seriously gimme your name. if you dont give me your name\n          i wont record your score\n        `);\n      }\n      if (!name) {\n        alert('wow you are just so humble.');\n        this.gameOver({}, true);\n      } else {\n        registerName(gameID, name)\n          .then(this.setTop50)\n      }\n    });\n  }\n\n  handleCellClick(cell) {\n    if (!cell.clicked && !cell.flagged && !cell.dunno && !this.state.gameOver) {\n      this.updateCellState({ ...cell, clicked: true }, () => {\n        if (cell.isMine) {\n          this.gameOver(cell);\n        } else {\n          const p = propagateMap(propagate({ ...cell, clicked: true }, this.state.board))\n\n          const maybeResetHint = this.state.hint && ((\n            p[this.state.hint.y] &&\n            p[this.state.hint.y][this.state.hint.x]\n          ) || (\n            cell.y === this.state.hint.y &&\n            cell.x === this.state.hint.x\n          ))\n              ? { hint: null }\n              : {};\n\n          const newBoard = this.state.board.map((row, y) => row.map((cell, x) => {\n            if (p && p[y] && p[y][x]) return { ...cell, clicked: !cell.flagged && !cell.dunno };\n            return cell;\n          }));\n\n          sendClick(this.state.gameID, this.state.startedAt, this.state.key)\n            .catch(() => {\n              alert('something went wrong. your score wont be recorded but you can still play');\n              this.setState({\n                gameID: null,\n              });\n              return { data: {} };\n            })\n            .then(({ data }) => {\n              this.setState({\n                board: newBoard,\n                status: '🙂',\n                clicks: this.state.clicks + 1,\n                key: data.lastkey,\n                ...maybeResetHint,\n              }, () => {\n                if (\n                  flatten(this.state.board)\n                    .filter(c => !c.clicked)\n                    .length === mineCounts[this.state.difficulty]\n                ) {\n                  this.winnerWinnerChickenDinner();\n                 }\n              });\n            });\n        }\n      });\n    }\n  }\n\n  startGame() {\n    if (this.state.timer) clearInterval(this.state.timer);\n    const board = makeBoard(this.state.selectedDiff);\n    const threeBV = get3BV(board);\n    const startedAt = new Date();\n\n    if (this.state.gameID) {\n      gameOverCall(this.state.gameID);\n    }\n    newGame(startedAt, threeBV, this.state.selectedDiff)\n      .then(({ data }) => {\n        this.setState({\n          difficulty: this.state.selectedDiff,\n          board,\n          threeBV,\n          playing: true,\n          gameOver: false,\n          losingCell: {},\n          timer: setInterval(() => this.setState({ time: this.state.time + 1 }), 1000),\n          time: 0,\n          clicks: 0,\n          status: '🙂',\n          flags: mineCounts[this.state.selectedDiff],\n          hint: null,\n          startedAt,\n          gameID: data.id,\n          key: data.lastkey,\n        })\n      });\n  }\n\n  suspense(e) {\n    if (e.button === 0 && !this.state.gameOver) {\n      this.setState({ status: '😲' });\n    }\n  }\n\n  hint() {\n    const gaps = flatten(this.state.board).filter(c => !c.isMine && !c.clicked && !c.flagged && !c.dunno && !c.count);\n    if (gaps.length === 0) return;\n    const hintCell = gaps[Math.floor(Math.random() * gaps.length)];\n    this.setState({\n      clicks: this.state.clicks + 10,\n      hint: hintCell,\n    });\n  }\n\n  handlePointerDown(cell) {\n    return (e) => {\n      e.preventDefault();\n      if (e.pointerType === 'mouse') {\n        if (e.button === 0) {\n          return this.suspense(e);\n        }\n        if (e.button === 2) {\n          // onContextMenu works better\n          return this.handleCellRightClick(cell);\n        }\n      } else {\n        if (!this.state.gameOver) {\n          this.setState({\n            status: '😲',\n            touchTimer: setTimeout(() => {\n              this.setState({ touchTimer: null, status: '🙂', skipContextMenu: true });\n              this.handleCellRightClick(cell);\n            }, 450),\n          });\n        }\n      }\n    }\n  }\n\n  handlePointerUp(cell) {\n    return (e) => {\n      if (e.pointerType === 'mouse') {\n        if (e.button === 0) {\n          return this.handleCellClick(cell);\n        }\n      } else {\n        e.preventDefault();\n        if (this.state.touchTimer) {\n          clearInterval(this.state.touchTimer);\n          this.setState({ touchTimer: null });\n          this.handleCellClick(cell);\n        }\n        if (this.state.skipContextMenu) this.setState({ skipContextMenu: false });\n      }\n    }\n  }\n\n  handlePointerLeave(e) {\n    if (this.state.touchTimer) {\n      clearInterval(this.state.touchTimer);\n      this.setState({ touchTimer: null });\n    }\n  }\n\n  toggleMusic() {\n    if (this.state.music) {\n      this.player.pause();\n      this.player.currentTime = 0;\n    } else {\n      this.player.play();\n    }\n    this.setState({ music: !this.state.music });\n  }\n\n  render() {\n    const isLosingCell = cell =>\n      this.state.losingCell.x === cell.x && this.state.losingCell.y === cell.y;\n\n    return (\n      <div className=\"App\">\n        {this.state.gameOver &&\n          <div>\n            <div>Start new game</div>\n            <select value={this.state.selectedDiff} onChange={this.handleSelect}>\n              {difficulties.map((d, i) => (\n                <option key={d} value={i}>{d}</option>\n              ))}\n            </select>\n            <button onClick={this.startGame}>GO!</button>\n          </div>\n        }\n        {this.state.playing &&\n          <div>\n            <div className=\"hud\">Score: {commas(score(this.state))}</div>\n            <div className=\"playArea\">\n              <div className=\"hud\">\n                <span style={{ float: 'left' }}>{this.state.flags}</span>\n                <button className=\"statusGuy\" onClick={this.startGame}>{this.state.status}</button>\n                <span style={{ float: 'right' }}>{String(this.state.time).padStart(3, '0')}</span>\n                <br />\n              </div>\n              {this.state.board.map(row => (\n                <div className=\"row\">\n                  {row.map(cell => (\n                    <button\n                      className={cell.clicked ? 'clicked' : 'butt'}\n                      style={cell.clicked && !cell.flagged && !cell.dunno && !cell.isMine ? {\n                        color: colors[cell.count], fontWeight: 900,\n                      }: {}}\n                      disabled={cell.clicked}\n                      onMouseUp={(e) => {\n                        if (e.button === 0) {\n                          this.handleCellClick(cell)\n                        }\n                      }}\n                      onMouseDown={this.suspense}\n                      onContextMenu={(e) => {\n                        e.preventDefault();\n                        if (!this.state.skipContextMenu) {\n                          this.handleCellRightClick(cell);\n                        } else {\n                          this.setState({ skipContextMenu: false });\n                        }\n                      }}\n                      onTouchStart={this.handlePointerDown(cell)}\n                      onTouchEnd={this.handlePointerUp(cell)}\n                      onTouchMove={this.handlePointerLeave}\n                      // onTouchCancel={this.handlePointerLeave}\n                    >\n                      {this.state.gameOver && !cell.flagged && cell.isMine && !isLosingCell(cell)\n                        ? '💩'\n                        : getOverlay(cell, this.state.gameOver, this.state.hint)\n                      }\n                    </button>\n                  ))}\n                </div>\n              ))}\n              <button disabled={this.state.hint} onClick={this.hint}>Gimme a dang hint</button>\n              <br />\n              {!this.state.gameOver &&\n                <div>\n                  <audio loop ref={ref => this.player = ref}>\n                    <source src='spiderman.mp3' />\n                  </audio>\n                  <button onClick={this.toggleMusic}>\n                    PLEASE {this.state.music ? 'STOP' : 'START'} THE MUSIC\n                  </button>\n                </div>\n              }\n              <div>\n                You like this dang site?<br />\n                <a href=\"https://github.com/jameswillett/minesweeper\">\n                  Here&apos;s the dang code\n                </a>.\n              </div>\n            </div>\n          </div>\n        }\n        <div className=\"scoreBoard\">\n          {this.state.top50 &&\n            <table>\n              <thead>\n                <tr>\n                  <th>RANK</th>\n                  <th>NAME</th>\n                  <th>SCORE</th>\n                  <th>DIFFICULTY</th>\n                </tr>\n              </thead>\n              <tbody>\n              {this.state.top50.map((s, i) => (\n                <tr key={`${i + 1} id ${s.id}`}>\n                  <td>{i + 1}</td>\n                  <td>{s.name}</td>\n                  <td style={{ textAlign: 'right', fontFamily: 'monospace'}}>\n                    {commas(s.score)}\n                  </td>\n                  <td>{difficulties[s.difficulty]} ({s.difficulty + 1})</td>\n                </tr>\n              ))}\n              </tbody>\n            </table>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}